package jp.quadro.media.video{	import flash.events.*;	import flash.media.Video;	import flash.net.NetConnection;	import flash.net.NetStream;	import jp.quadro.display.BasicContainer;	import jp.quadro.managers.SoundManager;	public class VideoPlayer extends BasicContainer	{		private var _videoURL:String;		private var _connection:NetConnection;		private var _stream:NetStream;		private var _video:Video;		private var _isPlaying:Boolean;		private var _videoWidth:int;		private var _videoHeight:int;				public function play(url:String):void 		{			_isPlaying = true;						_video = new Video(_videoWidth, _videoHeight);			_video.attachNetStream(_stream);			_video.smoothing = true;			addChild(_video);						_videoURL = url;			_stream.play(url);			_stream.soundTransform.volume = SoundManager.getInstance().volume;		}				public function close():void 		{			_stream.close();			_video.clear();		}				override protected function onAddedToStage():void		{			_connection = new NetConnection();			_connection.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);			_connection.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);			_connection.connect(null);		}				override protected function onRemovedFromStage():void		{			if (_isPlaying) close();		}				private function netStatusHandler(event:NetStatusEvent):void		{			switch (event.info.code)			{				case "NetConnection.Connect.Success":					connectStream();				break;								case "NetStream.Play.StreamNotFound":					throw new Error("Unable to locate video: " + videoURL);				break;			}		}				private function connectStream():void		{			_stream = new NetStream(_connection);			_stream.client = new CustomClient();			_stream.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);			_stream.addEventListener(AsyncErrorEvent.ASYNC_ERROR, asyncErrorHandler);		}				private function securityErrorHandler(event:SecurityErrorEvent):void		{			throw new Error("securityErrorHandler: " + event);		}				private function asyncErrorHandler(event:AsyncErrorEvent):void		{			// ignore AsyncErrorEvent events.		}				public function get videoURL():String 		{			return _videoURL;		}				public function set videoURL(value:String):void 		{			_videoURL = value;		}				public function get isPlaying():Boolean 		{			return _isPlaying;		}				public function get videoWidth():Number 		{			return _videoWidth;		}				public function set videoWidth(value:Number):void 		{			_videoWidth = value;		}				public function get videoHeight():Number 		{			return _videoHeight;		}				public function set videoHeight(value:Number):void 		{			_videoHeight = value;		}	}}class CustomClient{	public function onMetaData(info:Object):void	{		//trace("metadata: duration=" + info.duration + " width=" + info.width + " height=" + info.height + " framerate=" + info.framerate);	}		public function onCuePoint(info:Object):void	{		//trace("cuepoint: time=" + info.time + " name=" + info.name + " type=" + info.type);	}		public function onXMPData(info:Object):void {};}